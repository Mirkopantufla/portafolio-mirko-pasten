---
interface Props {
	href: string;
    iconName: string;
	className: string;
}

const { href, iconName, className } = Astro.props
---

<a id={`link-${iconName}`} name="icono-animado" class='icono-animado col-span-2 flex flex-col justify-center items-center transition ease-out duration-[80ms] z-10 h-auto w-auto sombreado-blanco' target="_blank" href={href}>
    <img class:list={[`rounded-xl p-1 w-auto lg:max-w-40 xl:max-w-48 max-w-28 h-16 md:h-20 xl:h-28 invert-icon`, className]} src={`/icons/icono-${iconName}.png`} alt={iconName}>
</a>

<style>
    .icono-animado{
		perspective: 1000px;
	}
</style>

<script>
	const imagenes = document.querySelectorAll<HTMLInputElement>('.icono-animado');
	
	imagenes?.forEach((imagen) => {
		const img = imagen.querySelector("img") as HTMLImageElement
		const { width, height } = imagen.getBoundingClientRect();
		const halfWidth = width / 2;
		const halfHeight = height / 2;

		imagen?.addEventListener("mousemove", (e) => {
			const {offsetX, offsetY}  = e

			const rotateX = ((offsetX - halfWidth) / halfWidth) * 30;
			const rotateY = ((offsetY - halfHeight) / halfHeight) * 30;

			img.style.transform = `rotateX(${-rotateY}deg) rotateY(${rotateX}deg)`
		});

		imagen?.addEventListener(
			"mouseout",
			(e) => (
				img.style.transform = "rotateX(0deg) rotateY(0deg)"
			),
		);
	});
</script>